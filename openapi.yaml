openapi: 3.0.0
info:
  title: dobby API
  description: |-
    This is an OpenAPI specification for `dobby`'s REST API
  license:
    name: 'License: MIT'
  version: 0.1.0

externalDocs:
  description: Dobby documentation
  url: https://github.com/ly0va/dobby

servers:
  - url: http://0.0.0.0:8080

tags:
  - name: table
    description: Table operations
  - name: schema
    description: Altering database schema

paths:
  /{table}:
    parameters:
      - $ref: '#/components/parameters/Table'
    get:
      tags: [table]
      summary: Read rows from a table
      operationId: select
      parameters:
        - $ref: '#/components/parameters/Filter'
      responses:
        '200':
          description: Successful query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Row'
        '400':
          $ref: '#/components/responses/NotFound'
        '404':
          $ref: '#/components/responses/InvalidRequest'
        '5XX':
          $ref: '#/components/responses/InternalError'
    post:
      tags: [table]
      summary: Insert a row into a table
      operationId: insert
      requestBody:
        $ref: '#/components/requestBodies/Row'
      responses:
        '201':
          description: Successful insert
        '400':
          $ref: '#/components/responses/NotFound'
        '404':
          $ref: '#/components/responses/InvalidRequest'
        '5XX':
          $ref: '#/components/responses/InternalError'
    put:
      tags: [table]
      summary: Update rows in a table
      operationId: update
      parameters:
        - $ref: '#/components/parameters/Filter'
      requestBody:
        $ref: '#/components/requestBodies/Row'
      responses:
        '200':
          description: Successful update
        '400':
          $ref: '#/components/responses/NotFound'
        '404':
          $ref: '#/components/responses/InvalidRequest'
        '5XX':
          $ref: '#/components/responses/InternalError'
    delete:
      tags: [table]
      summary: Delete rows from a table
      operationId: delete
      parameters:
        - $ref: '#/components/parameters/Filter'
      responses:
        '200':
          description: Successful deletion
        '400':
          $ref: '#/components/responses/NotFound'
        '404':
          $ref: '#/components/responses/InvalidRequest'
        '5XX':
          $ref: '#/components/responses/InternalError'
  
  /.schema:
    get:
      tags: [schema]
      summary: Get the database schema
      operationId: schema
      responses:
        '200':
          description: Successful query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
        '400':
          $ref: '#/components/responses/NotFound'
        '404':
          $ref: '#/components/responses/InvalidRequest'
        '5XX':
          $ref: '#/components/responses/InternalError'
                
  /{table}/create:
    parameters:
      - $ref: '#/components/parameters/Table'
    post:
      tags: [schema]
      summary: Create a table
      operationId: create
      requestBody:
        $ref: '#/components/requestBodies/Table'
      responses:
        '201':
          description: Successful table creation
        '400':
          $ref: '#/components/responses/NotFound'
        '404':
          $ref: '#/components/responses/InvalidRequest'
        '5XX':
          $ref: '#/components/responses/InternalError'
          
  /{table}/drop:
    parameters:
      - $ref: '#/components/parameters/Table'
    delete:
      tags: [schema]
      summary: Drop a table
      operationId: drop
      responses:
        '200':
          description: Successful table deletion
        '400':
          $ref: '#/components/responses/NotFound'
        '404':
          $ref: '#/components/responses/InvalidRequest'
        '5XX':
          $ref: '#/components/responses/InternalError'
          
  /{table}/alter:
    parameters:
      - $ref: '#/components/parameters/Table'
    put:
      tags: [schema]
      summary: Rename columns in a table
      operationId: alter
      parameters:
        - name: renamings
          in: query
          description: Old:New colunm names
          schema:
            type: object
            additionalProperties:
              type: string
          example:
            model: brand
            price: money
      responses:
        '200':
          description: Successful column renamings
        '400':
          $ref: '#/components/responses/NotFound'
        '404':
          $ref: '#/components/responses/InvalidRequest'
        '5XX':
          $ref: '#/components/responses/InternalError'

components:
  schemas:
    Table:
      type: object
      additionalProperties:
        type: string
        enum: [int, float, string, char, string_invl, char_invl]
      example:
        id: int
        price: float
        model: string
        
    Database:
        type: object
        properties:
          name:
            type: string
            example: demo-db
          kind:
            type: string
            enum: [dobby, sqlite]
          tables:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/Table'
            example:
              cars: 
                id: int
                price: float
                model: string
              users:
                name: string
                age: int
                
    Row:
      type: object
      additionalProperties:
        anyOf:
          - type: string
          - type: number
          - type: integer
          - type: array
            minItems: 2
            maxItems: 2
            items:
              type: string
      example:
        id: 1
        model: Ferrari
        price: 181.818

  parameters:
    Table:
      in: path
      name: table
      description: Name of the table to execute the operation on
      required: true
      schema:
        type: string
        example: cars

    Filter:
      in: query
      name: filter
      required: false
      schema:
        type: object
        additionalProperties:
          anyOf:
            - type: string
            - type: number
            - type: integer
      example:
        id: 1
        
  requestBodies:
    Row:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Row'
    Table:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Table'

  responses:
    NotFound:
      description: A table or one of the columns does not exist
      content:
        application/json:
          schema:
            type: string
            example: Table not found
    InvalidRequest:
      description: Request format or content is invalid
      content:
        application/json:
          schema:
            type: string
            example: Invalid request
    InternalError:
      description: Internal error
      content:
        application/json:
          schema:
            type: string
            example: IO Error
